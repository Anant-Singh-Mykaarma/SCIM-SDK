package de.captaingoldfish.scim.sdk.translator.classbuilder;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import de.captaingoldfish.scim.sdk.common.constants.ClassPathReferences;
import de.captaingoldfish.scim.sdk.common.schemas.Schema;
import de.captaingoldfish.scim.sdk.common.utils.JsonHelper;


/**
 * @author Pascal Knueppel
 * @since 04.05.2021
 */
public class SchemaToClassBuilderTest
{

  @Test
  public void testSchemaToClassBuilderTest()
  {
    SchemaToClassBuilder schemaToClassBuilder = new SchemaToClassBuilder();
    Schema userSchema = new Schema(JsonHelper.loadJsonDocument(ClassPathReferences.USER_SCHEMA_JSON));
    String generatedUserClass = schemaToClassBuilder.generateClassFromSchema(userSchema);
    Assertions.assertEquals("package ???\n" + "\n" + "import java.util.List;\n" + "import java.util.Optional;\n"
                            + "import java.util.Set;\n"
                            + "import de.captaingoldfish.scim.sdk.common.resources.ResourceNode;\n"
                            + "import de.captaingoldfish.scim.sdk.common.resources.base.ScimObjectNode;\n" + "\n"
                            + "/** User Account */\n" + "public class User extends ResourceNode\n" + "{\n"
                            + "  public User(String externalId, String userName, Name name, String displayName, String nickName, String profileUrl, String title, String userType, String preferredLanguage, String locale, String timezone, Boolean active, String password, List<Emails> emailsList, List<PhoneNumbers> phoneNumbersList, List<Ims> imsList, List<Photos> photosList, List<Addresses> addressesList, List<Groups> groupsList, List<Entitlements> entitlementsList, List<Roles> rolesList, List<X509Certificates> x509CertificatesList) \n"
                            + "  {\n" + "  setExternalId(externalId);\n" + "  setUserName(userName);\n"
                            + "  setName(name);\n" + "  setDisplayName(displayName);\n" + "  setNickName(nickName);\n"
                            + "  setProfileUrl(profileUrl);\n" + "  setTitle(title);\n" + "  setUserType(userType);\n"
                            + "  setPreferredLanguage(preferredLanguage);\n" + "  setLocale(locale);\n"
                            + "  setTimezone(timezone);\n" + "  setActive(active);\n" + "  setPassword(password);\n"
                            + "  setEmails(emailsList);\n" + "  setPhoneNumbers(phoneNumbersList);\n"
                            + "  setIms(imsList);\n" + "  setPhotos(photosList);\n" + "  setAddresses(addressesList);\n"
                            + "  setGroups(groupsList);\n" + "  setEntitlements(entitlementsList);\n"
                            + "  setRoles(rolesList);\n" + "  setX509Certificates(x509CertificatesList);\n" + "  }\n"
                            + "  /** A String that is an identifier for the resource as defined by the provisioning client.The service provider MUST always interpret the externalId as scoped to the provisioning domain. */\n"
                            + "  public Optional<String> getExternalId()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.EXTERNAL_ID);\n" + "  }\n" + "\n"
                            + "  /** A String that is an identifier for the resource as defined by the provisioning client.The service provider MUST always interpret the externalId as scoped to the provisioning domain. */\n"
                            + "  public void setExternalId(String externalId)\n" + "  {\n"
                            + "     setAttribute(FieldNames.EXTERNAL_ID, externalId);\n" + "  }\n" + "\n"
                            + "  /** A service provider's unique identifier for the user, typically\n"
                            + "used by the user to directly authenticate to the service provider.Each User MUST include a non-empty userName value.  This identifier\n"
                            + "MUST be unique across the service provider's entire set of Users. */\n"
                            + "  public String getUserName()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.USER_NAME).orElse(null);\n" + "  }\n" + "\n"
                            + "  /** A service provider's unique identifier for the user, typically\n"
                            + "used by the user to directly authenticate to the service provider.Each User MUST include a non-empty userName value.  This identifier\n"
                            + "MUST be unique across the service provider's entire set of Users. */\n"
                            + "  public void setUserName(String userName)\n" + "  {\n"
                            + "     setAttribute(FieldNames.USER_NAME, userName);\n" + "  }\n" + "\n"
                            + "  /** The name of the User, suitable for display\n"
                            + "to end-users.  The name SHOULD be the full name of the User being described, if known. */\n"
                            + "  public Optional<String> getDisplayName()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.DISPLAY_NAME);\n" + "  }\n" + "\n"
                            + "  /** The name of the User, suitable for display\n"
                            + "to end-users.  The name SHOULD be the full name of the User being described, if known. */\n"
                            + "  public void setDisplayName(String displayName)\n" + "  {\n"
                            + "     setAttribute(FieldNames.DISPLAY_NAME, displayName);\n" + "  }\n" + "\n"
                            + "  /** The casual way to address the user in real life, e.g., 'Bob' or 'Bobby' instead of 'Robert'.  This attribute\n"
                            + "SHOULD NOT be used to represent a User's username (e.g., 'bjensen' or 'mpepperidge'). */\n"
                            + "  public Optional<String> getNickName()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.NICK_NAME);\n" + "  }\n" + "\n"
                            + "  /** The casual way to address the user in real life, e.g., 'Bob' or 'Bobby' instead of 'Robert'.  This attribute\n"
                            + "SHOULD NOT be used to represent a User's username (e.g., 'bjensen' or 'mpepperidge'). */\n"
                            + "  public void setNickName(String nickName)\n" + "  {\n"
                            + "     setAttribute(FieldNames.NICK_NAME, nickName);\n" + "  }\n" + "\n"
                            + "  /** A fully qualified URL pointing to a page\n"
                            + "representing the User's online profile. */\n"
                            + "  public Optional<String> getProfileUrl()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.PROFILE_URL);\n" + "  }\n" + "\n"
                            + "  /** A fully qualified URL pointing to a page\n"
                            + "representing the User's online profile. */\n"
                            + "  public void setProfileUrl(String profileUrl)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PROFILE_URL, profileUrl);\n" + "  }\n" + "\n"
                            + "  /** The user's title, such as \\\"Vice President.\\\" */\n"
                            + "  public Optional<String> getTitle()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TITLE);\n" + "  }\n" + "\n"
                            + "  /** The user's title, such as \\\"Vice President.\\\" */\n"
                            + "  public void setTitle(String title)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TITLE, title);\n" + "  }\n" + "\n"
                            + "  /** Used to identify the relationship between the organization and the user.  Typical values used might be\n"
                            + "'Contractor', 'Employee', 'Intern', 'Temp', 'External', and 'Unknown', but any value may be used. */\n"
                            + "  public Optional<String> getUserType()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.USER_TYPE);\n" + "  }\n" + "\n"
                            + "  /** Used to identify the relationship between the organization and the user.  Typical values used might be\n"
                            + "'Contractor', 'Employee', 'Intern', 'Temp', 'External', and 'Unknown', but any value may be used. */\n"
                            + "  public void setUserType(String userType)\n" + "  {\n"
                            + "     setAttribute(FieldNames.USER_TYPE, userType);\n" + "  }\n" + "\n"
                            + "  /** Indicates the User's preferred written or\n"
                            + "spoken language.  Generally used for selecting a localized user interface; e.g., 'en_US' specifies the language English and country */\n"
                            + "  public Optional<String> getPreferredLanguage()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.PREFERRED_LANGUAGE);\n" + "  }\n" + "\n"
                            + "  /** Indicates the User's preferred written or\n"
                            + "spoken language.  Generally used for selecting a localized user interface; e.g., 'en_US' specifies the language English and country */\n"
                            + "  public void setPreferredLanguage(String preferredLanguage)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PREFERRED_LANGUAGE, preferredLanguage);\n" + "  }\n" + "\n"
                            + "  /** Used to indicate the User's default location\n"
                            + "for purposes of localizing items such as currency, date time format, or numerical representations. */\n"
                            + "  public Optional<String> getLocale()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.LOCALE);\n" + "  }\n" + "\n"
                            + "  /** Used to indicate the User's default location\n"
                            + "for purposes of localizing items such as currency, date time format, or numerical representations. */\n"
                            + "  public void setLocale(String locale)\n" + "  {\n"
                            + "     setAttribute(FieldNames.LOCALE, locale);\n" + "  }\n" + "\n"
                            + "  /** The User's time zone in the 'Olson' time zone\n"
                            + "database format, e.g., 'America/Los_Angeles'. */\n"
                            + "  public Optional<String> getTimezone()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TIMEZONE);\n" + "  }\n" + "\n"
                            + "  /** The User's time zone in the 'Olson' time zone\n"
                            + "database format, e.g., 'America/Los_Angeles'. */\n"
                            + "  public void setTimezone(String timezone)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TIMEZONE, timezone);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the User's administrative status. */\n"
                            + "  public Optional<Boolean> getActive()\n" + "  {\n"
                            + "     return getBooleanAttribute(FieldNames.ACTIVE);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the User's administrative status. */\n"
                            + "  public void setActive(Boolean active)\n" + "  {\n"
                            + "     setAttribute(FieldNames.ACTIVE, active);\n" + "  }\n" + "\n"
                            + "  /** The User's cleartext password.  This attribute is intended to be used as a means to specify an initial\n"
                            + "password when creating a new User or to reset an existing User's password. */\n"
                            + "  public Optional<String> getPassword()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.PASSWORD);\n" + "  }\n" + "\n"
                            + "  /** The User's cleartext password.  This attribute is intended to be used as a means to specify an initial\n"
                            + "password when creating a new User or to reset an existing User's password. */\n"
                            + "  public void setPassword(String password)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PASSWORD, password);\n" + "  }\n" + "\n"
                            + "    /** The components of the user's real name.Providers MAY return just the full name as a single string in the\n"
                            + "formatted sub-attribute, or they MAY return just the individual component attributes using the other sub-attributes, or they MAY\n"
                            + "return both.  If both variants are returned, they SHOULD be describing the same name, with the formatted name indicating how the\n"
                            + "component attributes should be combined. */\n" + "  public Optional<Name> getName()\n"
                            + "  {\n" + "     return getObjectAttribute(FieldNames.NAME, Name.class);\n" + "  }\n"
                            + "\n"
                            + "    /** The components of the user's real name.Providers MAY return just the full name as a single string in the\n"
                            + "formatted sub-attribute, or they MAY return just the individual component attributes using the other sub-attributes, or they MAY\n"
                            + "return both.  If both variants are returned, they SHOULD be describing the same name, with the formatted name indicating how the\n"
                            + "component attributes should be combined. */\n" + "  public void setName(Name name)\n"
                            + "  {\n" + "     setAttribute(FieldNames.NAME, name);\n" + "  }\n" + "\n"
                            + "  /** The components of the user's real name.Providers MAY return just the full name as a single string in the\n"
                            + "formatted sub-attribute, or they MAY return just the individual component attributes using the other sub-attributes, or they MAY\n"
                            + "return both.  If both variants are returned, they SHOULD be describing the same name, with the formatted name indicating how the\n"
                            + "component attributes should be combined. */\n"
                            + "  public static class Name extends ScimObjectNode\n" + "  {\n"
                            + "    public Name(String formatted, String familyName, String givenName, String middleName, String honorificPrefix, String honorificSuffix) \n"
                            + "    {\n" + "    setFormatted(formatted);\n" + "    setFamilyName(familyName);\n"
                            + "    setGivenName(givenName);\n" + "    setMiddleName(middleName);\n"
                            + "    setHonorificPrefix(honorificPrefix);\n"
                            + "    setHonorificSuffix(honorificSuffix);\n" + "    }\n"
                            + "  /** The full name, including all middle names, titles, and suffixes as appropriate, formatted for display\n"
                            + "(e.g., 'Ms. Barbara J Jensen, III'). */\n" + "  public Optional<String> getFormatted()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.FORMATTED);\n" + "  }\n" + "\n"
                            + "  /** The full name, including all middle names, titles, and suffixes as appropriate, formatted for display\n"
                            + "(e.g., 'Ms. Barbara J Jensen, III'). */\n"
                            + "  public void setFormatted(String formatted)\n" + "  {\n"
                            + "     setAttribute(FieldNames.FORMATTED, formatted);\n" + "  }\n" + "\n"
                            + "  /** The family name of the User, or last name in most Western languages (e.g., 'Jensen' given the full\n"
                            + "name 'Ms. Barbara J Jensen, III'). */\n" + "  public Optional<String> getFamilyName()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.FAMILY_NAME);\n" + "  }\n" + "\n"
                            + "  /** The family name of the User, or last name in most Western languages (e.g., 'Jensen' given the full\n"
                            + "name 'Ms. Barbara J Jensen, III'). */\n"
                            + "  public void setFamilyName(String familyName)\n" + "  {\n"
                            + "     setAttribute(FieldNames.FAMILY_NAME, familyName);\n" + "  }\n" + "\n"
                            + "  /** The given name of the User, or first name in most Western languages (e.g., 'Barbara' given the\n"
                            + "full name 'Ms. Barbara J Jensen, III'). */\n"
                            + "  public Optional<String> getGivenName()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.GIVEN_NAME);\n" + "  }\n" + "\n"
                            + "  /** The given name of the User, or first name in most Western languages (e.g., 'Barbara' given the\n"
                            + "full name 'Ms. Barbara J Jensen, III'). */\n"
                            + "  public void setGivenName(String givenName)\n" + "  {\n"
                            + "     setAttribute(FieldNames.GIVEN_NAME, givenName);\n" + "  }\n" + "\n"
                            + "  /** The middle name(s) of the User (e.g., 'Jane' given the full name 'Ms. Barbara J Jensen, III'). */\n"
                            + "  public Optional<String> getMiddleName()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.MIDDLE_NAME);\n" + "  }\n" + "\n"
                            + "  /** The middle name(s) of the User (e.g., 'Jane' given the full name 'Ms. Barbara J Jensen, III'). */\n"
                            + "  public void setMiddleName(String middleName)\n" + "  {\n"
                            + "     setAttribute(FieldNames.MIDDLE_NAME, middleName);\n" + "  }\n" + "\n"
                            + "  /** The honorific prefix(es) of the User, or title in most Western languages (e.g., 'Ms.' given the full name\n"
                            + "'Ms. Barbara J Jensen, III'). */\n" + "  public Optional<String> getHonorificPrefix()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.HONORIFIC_PREFIX);\n" + "  }\n"
                            + "\n"
                            + "  /** The honorific prefix(es) of the User, or title in most Western languages (e.g., 'Ms.' given the full name\n"
                            + "'Ms. Barbara J Jensen, III'). */\n"
                            + "  public void setHonorificPrefix(String honorificPrefix)\n" + "  {\n"
                            + "     setAttribute(FieldNames.HONORIFIC_PREFIX, honorificPrefix);\n" + "  }\n" + "\n"
                            + "  /** The honorific suffix(es) of the User, or suffix in most Western languages (e.g., 'III' given the full name\n"
                            + "'Ms. Barbara J Jensen, III'). */\n" + "  public Optional<String> getHonorificSuffix()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.HONORIFIC_SUFFIX);\n" + "  }\n"
                            + "\n"
                            + "  /** The honorific suffix(es) of the User, or suffix in most Western languages (e.g., 'III' given the full name\n"
                            + "'Ms. Barbara J Jensen, III'). */\n"
                            + "  public void setHonorificSuffix(String honorificSuffix)\n" + "  {\n"
                            + "     setAttribute(FieldNames.HONORIFIC_SUFFIX, honorificSuffix);\n" + "  }\n" + "\n"
                            + "\n"
                            + "  }    /** Email addresses for the user.  The value SHOULD be canonicalized by the service provider, e.g.,\n"
                            + "'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'.Canonical type values of 'work', 'home', and 'other'. */\n"
                            + "  public List<Emails> getEmails()\n" + "  {\n"
                            + "     return getArrayAttribute(FieldNames.EMAILS, Emails.class);\n" + "  }\n" + "\n"
                            + "    /** Email addresses for the user.  The value SHOULD be canonicalized by the service provider, e.g.,\n"
                            + "'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'.Canonical type values of 'work', 'home', and 'other'. */\n"
                            + "  public void setEmails(List<Emails> emailsList)\n" + "  {\n"
                            + "     setAttribute(FieldNames.EMAILS, emailsList);\n" + "  }\n" + "\n"
                            + "  /** Email addresses for the user.  The value SHOULD be canonicalized by the service provider, e.g.,\n"
                            + "'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'.Canonical type values of 'work', 'home', and 'other'. */\n"
                            + "  public static class Emails extends ScimObjectNode\n" + "  {\n"
                            + "    public Emails(String value, String display, String type, Boolean primary) \n"
                            + "    {\n" + "    setValue(value);\n" + "    setDisplay(display);\n"
                            + "    setType(type);\n" + "    setPrimary(primary);\n" + "    }\n"
                            + "  /** Email addresses for the user.  The value SHOULD be canonicalized by the service provider, e.g.,\n"
                            + "'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'.Canonical type values of 'work', 'home', and 'other'. */\n"
                            + "  public Optional<String> getValue()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.VALUE);\n" + "  }\n" + "\n"
                            + "  /** Email addresses for the user.  The value SHOULD be canonicalized by the service provider, e.g.,\n"
                            + "'bjensen@example.com' instead of 'bjensen@EXAMPLE.COM'.Canonical type values of 'work', 'home', and 'other'. */\n"
                            + "  public void setValue(String value)\n" + "  {\n"
                            + "     setAttribute(FieldNames.VALUE, value);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public Optional<String> getDisplay()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.DISPLAY);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public void setDisplay(String display)\n" + "  {\n"
                            + "     setAttribute(FieldNames.DISPLAY, display);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, e.g., 'work' or 'home'. */\n"
                            + "  public Optional<String> getType()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TYPE);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, e.g., 'work' or 'home'. */\n"
                            + "  public void setType(String type)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TYPE, type);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the psreferred mailing address or primary email address.  The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public Optional<Boolean> getPrimary()\n" + "  {\n"
                            + "     return getBooleanAttribute(FieldNames.PRIMARY);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the psreferred mailing address or primary email address.  The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public void setPrimary(Boolean primary)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PRIMARY, primary);\n" + "  }\n" + "\n" + "\n"
                            + "  }    /** Phone numbers for the User.  The value SHOULD be canonicalized by the service provider according to the\n"
                            + "format specified in RFC 3966, e.g., 'tel:+1-201-555-0123'.Canonical type values of 'work', 'home', 'mobile', 'fax', 'pager */\n"
                            + "  public List<PhoneNumbers> getPhoneNumbers()\n" + "  {\n"
                            + "     return getArrayAttribute(FieldNames.PHONE_NUMBERS, PhoneNumbers.class);\n" + "  }\n"
                            + "\n"
                            + "    /** Phone numbers for the User.  The value SHOULD be canonicalized by the service provider according to the\n"
                            + "format specified in RFC 3966, e.g., 'tel:+1-201-555-0123'.Canonical type values of 'work', 'home', 'mobile', 'fax', 'pager */\n"
                            + "  public void setPhoneNumbers(List<PhoneNumbers> phoneNumbersList)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PHONE_NUMBERS, phoneNumbersList);\n" + "  }\n" + "\n"
                            + "  /** Phone numbers for the User.  The value SHOULD be canonicalized by the service provider according to the\n"
                            + "format specified in RFC 3966, e.g., 'tel:+1-201-555-0123'.Canonical type values of 'work', 'home', 'mobile', 'fax', 'pager */\n"
                            + "  public static class PhoneNumbers extends ScimObjectNode\n" + "  {\n"
                            + "    public PhoneNumbers(String value, String display, String type, Boolean primary) \n"
                            + "    {\n" + "    setValue(value);\n" + "    setDisplay(display);\n"
                            + "    setType(type);\n" + "    setPrimary(primary);\n" + "    }\n"
                            + "  /** Phone number of the User. */\n" + "  public Optional<String> getValue()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.VALUE);\n" + "  }\n" + "\n"
                            + "  /** Phone number of the User. */\n" + "  public void setValue(String value)\n"
                            + "  {\n" + "     setAttribute(FieldNames.VALUE, value);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public Optional<String> getDisplay()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.DISPLAY);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public void setDisplay(String display)\n" + "  {\n"
                            + "     setAttribute(FieldNames.DISPLAY, display);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, e.g., 'work', 'home', 'mobile'. */\n"
                            + "  public Optional<String> getType()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TYPE);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, e.g., 'work', 'home', 'mobile'. */\n"
                            + "  public void setType(String type)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TYPE, type);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred\n"
                            + "phone number or primary phone number.  The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public Optional<Boolean> getPrimary()\n" + "  {\n"
                            + "     return getBooleanAttribute(FieldNames.PRIMARY);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred\n"
                            + "phone number or primary phone number.  The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public void setPrimary(Boolean primary)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PRIMARY, primary);\n" + "  }\n" + "\n" + "\n"
                            + "  }    /** Instant messaging addresses for the User. */\n"
                            + "  public List<Ims> getIms()\n" + "  {\n"
                            + "     return getArrayAttribute(FieldNames.IMS, Ims.class);\n" + "  }\n" + "\n"
                            + "    /** Instant messaging addresses for the User. */\n"
                            + "  public void setIms(List<Ims> imsList)\n" + "  {\n"
                            + "     setAttribute(FieldNames.IMS, imsList);\n" + "  }\n" + "\n"
                            + "  /** Instant messaging addresses for the User. */\n"
                            + "  public static class Ims extends ScimObjectNode\n" + "  {\n"
                            + "    public Ims(String value, String display, String type, Boolean primary) \n"
                            + "    {\n" + "    setValue(value);\n" + "    setDisplay(display);\n"
                            + "    setType(type);\n" + "    setPrimary(primary);\n" + "    }\n"
                            + "  /** Instant messaging address for the User. */\n"
                            + "  public Optional<String> getValue()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.VALUE);\n" + "  }\n" + "\n"
                            + "  /** Instant messaging address for the User. */\n"
                            + "  public void setValue(String value)\n" + "  {\n"
                            + "     setAttribute(FieldNames.VALUE, value);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public Optional<String> getDisplay()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.DISPLAY);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public void setDisplay(String display)\n" + "  {\n"
                            + "     setAttribute(FieldNames.DISPLAY, display);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, e.g., 'aim', 'gtalk', 'xmpp'. */\n"
                            + "  public Optional<String> getType()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TYPE);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, e.g., 'aim', 'gtalk', 'xmpp'. */\n"
                            + "  public void setType(String type)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TYPE, type);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred\n"
                            + "messenger or primary messenger.  The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public Optional<Boolean> getPrimary()\n" + "  {\n"
                            + "     return getBooleanAttribute(FieldNames.PRIMARY);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred\n"
                            + "messenger or primary messenger.  The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public void setPrimary(Boolean primary)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PRIMARY, primary);\n" + "  }\n" + "\n" + "\n"
                            + "  }    /** URLs of photos of the User. */\n" + "  public List<Photos> getPhotos()\n"
                            + "  {\n" + "     return getArrayAttribute(FieldNames.PHOTOS, Photos.class);\n" + "  }\n"
                            + "\n" + "    /** URLs of photos of the User. */\n"
                            + "  public void setPhotos(List<Photos> photosList)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PHOTOS, photosList);\n" + "  }\n" + "\n"
                            + "  /** URLs of photos of the User. */\n"
                            + "  public static class Photos extends ScimObjectNode\n" + "  {\n"
                            + "    public Photos(String value, String display, String type, Boolean primary) \n"
                            + "    {\n" + "    setValue(value);\n" + "    setDisplay(display);\n"
                            + "    setType(type);\n" + "    setPrimary(primary);\n" + "    }\n"
                            + "  /** URLs of photos of the User. */\n" + "  public Optional<String> getValue()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.VALUE);\n" + "  }\n" + "\n"
                            + "  /** URLs of photos of the User. */\n" + "  public void setValue(String value)\n"
                            + "  {\n" + "     setAttribute(FieldNames.VALUE, value);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public Optional<String> getDisplay()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.DISPLAY);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public void setDisplay(String display)\n" + "  {\n"
                            + "     setAttribute(FieldNames.DISPLAY, display);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, i.e., 'photo' or 'thumbnail'. */\n"
                            + "  public Optional<String> getType()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TYPE);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, i.e., 'photo' or 'thumbnail'. */\n"
                            + "  public void setType(String type)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TYPE, type);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred\n"
                            + "phone number or primary phone number. The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public Optional<Boolean> getPrimary()\n" + "  {\n"
                            + "     return getBooleanAttribute(FieldNames.PRIMARY);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute, e.g., the preferred\n"
                            + "phone number or primary phone number. The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public void setPrimary(Boolean primary)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PRIMARY, primary);\n" + "  }\n" + "\n" + "\n"
                            + "  }    /** A physical mailing address for this User.\n"
                            + "Canonical type values of 'work', 'home', and 'other'.  This attribute is a complex type with the following sub-attributes. */\n"
                            + "  public List<Addresses> getAddresses()\n" + "  {\n"
                            + "     return getArrayAttribute(FieldNames.ADDRESSES, Addresses.class);\n" + "  }\n" + "\n"
                            + "    /** A physical mailing address for this User.\n"
                            + "Canonical type values of 'work', 'home', and 'other'.  This attribute is a complex type with the following sub-attributes. */\n"
                            + "  public void setAddresses(List<Addresses> addressesList)\n" + "  {\n"
                            + "     setAttribute(FieldNames.ADDRESSES, addressesList);\n" + "  }\n" + "\n"
                            + "  /** A physical mailing address for this User.\n"
                            + "Canonical type values of 'work', 'home', and 'other'.  This attribute is a complex type with the following sub-attributes. */\n"
                            + "  public static class Addresses extends ScimObjectNode\n" + "  {\n"
                            + "    public Addresses(String formatted, String streetAddress, String locality, String region, String postalCode, String country, String type, Boolean primary) \n"
                            + "    {\n" + "    setFormatted(formatted);\n" + "    setStreetAddress(streetAddress);\n"
                            + "    setLocality(locality);\n" + "    setRegion(region);\n"
                            + "    setPostalCode(postalCode);\n" + "    setCountry(country);\n" + "    setType(type);\n"
                            + "    setPrimary(primary);\n" + "    }\n"
                            + "  /** The full mailing address, formatted for display or use with a mailing label.  This attribute MAY contain\n"
                            + "newlines. */\n" + "  public Optional<String> getFormatted()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.FORMATTED);\n" + "  }\n" + "\n"
                            + "  /** The full mailing address, formatted for display or use with a mailing label.  This attribute MAY contain\n"
                            + "newlines. */\n" + "  public void setFormatted(String formatted)\n" + "  {\n"
                            + "     setAttribute(FieldNames.FORMATTED, formatted);\n" + "  }\n" + "\n"
                            + "  /** The full street address component, which may include house number, street name, P.O. box, and multi-line\n"
                            + "extended street address information.  This attribute MAY contain newlines. */\n"
                            + "  public Optional<String> getStreetAddress()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.STREET_ADDRESS);\n" + "  }\n" + "\n"
                            + "  /** The full street address component, which may include house number, street name, P.O. box, and multi-line\n"
                            + "extended street address information.  This attribute MAY contain newlines. */\n"
                            + "  public void setStreetAddress(String streetAddress)\n" + "  {\n"
                            + "     setAttribute(FieldNames.STREET_ADDRESS, streetAddress);\n" + "  }\n" + "\n"
                            + "  /** The city or locality component. */\n" + "  public Optional<String> getLocality()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.LOCALITY);\n" + "  }\n" + "\n"
                            + "  /** The city or locality component. */\n"
                            + "  public void setLocality(String locality)\n" + "  {\n"
                            + "     setAttribute(FieldNames.LOCALITY, locality);\n" + "  }\n" + "\n"
                            + "  /** The state or region component. */\n" + "  public Optional<String> getRegion()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.REGION);\n" + "  }\n" + "\n"
                            + "  /** The state or region component. */\n" + "  public void setRegion(String region)\n"
                            + "  {\n" + "     setAttribute(FieldNames.REGION, region);\n" + "  }\n" + "\n"
                            + "  /** The zip code or postal code component. */\n"
                            + "  public Optional<String> getPostalCode()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.POSTAL_CODE);\n" + "  }\n" + "\n"
                            + "  /** The zip code or postal code component. */\n"
                            + "  public void setPostalCode(String postalCode)\n" + "  {\n"
                            + "     setAttribute(FieldNames.POSTAL_CODE, postalCode);\n" + "  }\n" + "\n"
                            + "  /** The country name component. */\n" + "  public Optional<String> getCountry()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.COUNTRY);\n" + "  }\n" + "\n"
                            + "  /** The country name component. */\n" + "  public void setCountry(String country)\n"
                            + "  {\n" + "     setAttribute(FieldNames.COUNTRY, country);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, e.g., 'work' or 'home'. */\n"
                            + "  public Optional<String> getType()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TYPE);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, e.g., 'work' or 'home'. */\n"
                            + "  public void setType(String type)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TYPE, type);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute.  The primary\n"
                            + "attribute value 'true' MUST appear no more than once. */\n"
                            + "  public Optional<Boolean> getPrimary()\n" + "  {\n"
                            + "     return getBooleanAttribute(FieldNames.PRIMARY);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute.  The primary\n"
                            + "attribute value 'true' MUST appear no more than once. */\n"
                            + "  public void setPrimary(Boolean primary)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PRIMARY, primary);\n" + "  }\n" + "\n" + "\n"
                            + "  }    /** A list of groups to which the user belongs,\n"
                            + "either through direct membership, through nested groups, or dynamically calculated. */\n"
                            + "  public List<Groups> getGroups()\n" + "  {\n"
                            + "     return getArrayAttribute(FieldNames.GROUPS, Groups.class);\n" + "  }\n" + "\n"
                            + "    /** A list of groups to which the user belongs,\n"
                            + "either through direct membership, through nested groups, or dynamically calculated. */\n"
                            + "  public void setGroups(List<Groups> groupsList)\n" + "  {\n"
                            + "     setAttribute(FieldNames.GROUPS, groupsList);\n" + "  }\n" + "\n"
                            + "  /** A list of groups to which the user belongs,\n"
                            + "either through direct membership, through nested groups, or dynamically calculated. */\n"
                            + "  public static class Groups extends ScimObjectNode\n" + "  {\n"
                            + "    public Groups(String value, String $ref, String display, String type) \n" + "    {\n"
                            + "    setValue(value);\n" + "    set$ref($ref);\n" + "    setDisplay(display);\n"
                            + "    setType(type);\n" + "    }\n" + "  /** The identifier of the User's group. */\n"
                            + "  public Optional<String> getValue()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.VALUE);\n" + "  }\n" + "\n"
                            + "  /** The identifier of the User's group. */\n"
                            + "  public void setValue(String value)\n" + "  {\n"
                            + "     setAttribute(FieldNames.VALUE, value);\n" + "  }\n" + "\n"
                            + "  /** The uri of the corresponding 'Group' resource to which the user belongs. */\n"
                            + "  public Optional<String> get$ref()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.$REF);\n" + "  }\n" + "\n"
                            + "  /** The uri of the corresponding 'Group' resource to which the user belongs. */\n"
                            + "  public void set$ref(String $ref)\n" + "  {\n"
                            + "     setAttribute(FieldNames.$REF, $ref);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes. READ-ONLY. */\n"
                            + "  public Optional<String> getDisplay()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.DISPLAY);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes. READ-ONLY. */\n"
                            + "  public void setDisplay(String display)\n" + "  {\n"
                            + "     setAttribute(FieldNames.DISPLAY, display);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, e.g., 'direct' or 'indirect'. */\n"
                            + "  public Optional<String> getType()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TYPE);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function, e.g., 'direct' or 'indirect'. */\n"
                            + "  public void setType(String type)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TYPE, type);\n" + "  }\n" + "\n" + "\n"
                            + "  }    /** A list of entitlements for the User that represent a thing the User has. */\n"
                            + "  public List<Entitlements> getEntitlements()\n" + "  {\n"
                            + "     return getArrayAttribute(FieldNames.ENTITLEMENTS, Entitlements.class);\n" + "  }\n"
                            + "\n"
                            + "    /** A list of entitlements for the User that represent a thing the User has. */\n"
                            + "  public void setEntitlements(List<Entitlements> entitlementsList)\n" + "  {\n"
                            + "     setAttribute(FieldNames.ENTITLEMENTS, entitlementsList);\n" + "  }\n" + "\n"
                            + "  /** A list of entitlements for the User that represent a thing the User has. */\n"
                            + "  public static class Entitlements extends ScimObjectNode\n" + "  {\n"
                            + "    public Entitlements(String value, String display, String type, Boolean primary) \n"
                            + "    {\n" + "    setValue(value);\n" + "    setDisplay(display);\n"
                            + "    setType(type);\n" + "    setPrimary(primary);\n" + "    }\n"
                            + "  /** The value of an entitlement. */\n" + "  public Optional<String> getValue()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.VALUE);\n" + "  }\n" + "\n"
                            + "  /** The value of an entitlement. */\n" + "  public void setValue(String value)\n"
                            + "  {\n" + "     setAttribute(FieldNames.VALUE, value);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public Optional<String> getDisplay()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.DISPLAY);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public void setDisplay(String display)\n" + "  {\n"
                            + "     setAttribute(FieldNames.DISPLAY, display);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function. */\n"
                            + "  public Optional<String> getType()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TYPE);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function. */\n"
                            + "  public void setType(String type)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TYPE, type);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute.  The primary\n"
                            + "attribute value 'true' MUST appear no more than once. */\n"
                            + "  public Optional<Boolean> getPrimary()\n" + "  {\n"
                            + "     return getBooleanAttribute(FieldNames.PRIMARY);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute.  The primary\n"
                            + "attribute value 'true' MUST appear no more than once. */\n"
                            + "  public void setPrimary(Boolean primary)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PRIMARY, primary);\n" + "  }\n" + "\n" + "\n"
                            + "  }    /** A list of roles for the User that collectively represent who the User is, e.g., 'Student', 'Faculty'. */\n"
                            + "  public List<Roles> getRoles()\n" + "  {\n"
                            + "     return getArrayAttribute(FieldNames.ROLES, Roles.class);\n" + "  }\n" + "\n"
                            + "    /** A list of roles for the User that collectively represent who the User is, e.g., 'Student', 'Faculty'. */\n"
                            + "  public void setRoles(List<Roles> rolesList)\n" + "  {\n"
                            + "     setAttribute(FieldNames.ROLES, rolesList);\n" + "  }\n" + "\n"
                            + "  /** A list of roles for the User that collectively represent who the User is, e.g., 'Student', 'Faculty'. */\n"
                            + "  public static class Roles extends ScimObjectNode\n" + "  {\n"
                            + "    public Roles(String value, String display, String type, Boolean primary) \n"
                            + "    {\n" + "    setValue(value);\n" + "    setDisplay(display);\n"
                            + "    setType(type);\n" + "    setPrimary(primary);\n" + "    }\n"
                            + "  /** The value of a role. */\n" + "  public Optional<String> getValue()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.VALUE);\n" + "  }\n" + "\n"
                            + "  /** The value of a role. */\n" + "  public void setValue(String value)\n" + "  {\n"
                            + "     setAttribute(FieldNames.VALUE, value);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public Optional<String> getDisplay()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.DISPLAY);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public void setDisplay(String display)\n" + "  {\n"
                            + "     setAttribute(FieldNames.DISPLAY, display);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function. */\n"
                            + "  public Optional<String> getType()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TYPE);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function. */\n"
                            + "  public void setType(String type)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TYPE, type);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute.  The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public Optional<Boolean> getPrimary()\n" + "  {\n"
                            + "     return getBooleanAttribute(FieldNames.PRIMARY);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute.  The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public void setPrimary(Boolean primary)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PRIMARY, primary);\n" + "  }\n" + "\n" + "\n"
                            + "  }    /** A list of certificates issued to the User. */\n"
                            + "  public List<X509Certificates> getX509Certificates()\n" + "  {\n"
                            + "     return getArrayAttribute(FieldNames.X509_CERTIFICATES, X509Certificates.class);\n"
                            + "  }\n" + "\n" + "    /** A list of certificates issued to the User. */\n"
                            + "  public void setX509Certificates(List<X509Certificates> x509CertificatesList)\n"
                            + "  {\n" + "     setAttribute(FieldNames.X509_CERTIFICATES, x509CertificatesList);\n"
                            + "  }\n" + "\n" + "  /** A list of certificates issued to the User. */\n"
                            + "  public static class X509Certificates extends ScimObjectNode\n" + "  {\n"
                            + "    public X509Certificates(String value, String display, String type, Boolean primary) \n"
                            + "    {\n" + "    setValue(value);\n" + "    setDisplay(display);\n"
                            + "    setType(type);\n" + "    setPrimary(primary);\n" + "    }\n"
                            + "  /** The value of an X.509 certificate. */\n" + "  public Optional<String> getValue()\n"
                            + "  {\n" + "     return getStringAttribute(FieldNames.VALUE);\n" + "  }\n" + "\n"
                            + "  /** The value of an X.509 certificate. */\n" + "  public void setValue(String value)\n"
                            + "  {\n" + "     setAttribute(FieldNames.VALUE, value);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public Optional<String> getDisplay()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.DISPLAY);\n" + "  }\n" + "\n"
                            + "  /** A human-readable name, primarily used for display purposes.  READ-ONLY. */\n"
                            + "  public void setDisplay(String display)\n" + "  {\n"
                            + "     setAttribute(FieldNames.DISPLAY, display);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function. */\n"
                            + "  public Optional<String> getType()\n" + "  {\n"
                            + "     return getStringAttribute(FieldNames.TYPE);\n" + "  }\n" + "\n"
                            + "  /** A label indicating the attribute's function. */\n"
                            + "  public void setType(String type)\n" + "  {\n"
                            + "     setAttribute(FieldNames.TYPE, type);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute.The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public Optional<Boolean> getPrimary()\n" + "  {\n"
                            + "     return getBooleanAttribute(FieldNames.PRIMARY);\n" + "  }\n" + "\n"
                            + "  /** A Boolean value indicating the 'primary' or preferred attribute value for this attribute.The primary attribute value 'true' MUST appear no more than once. */\n"
                            + "  public void setPrimary(Boolean primary)\n" + "  {\n"
                            + "     setAttribute(FieldNames.PRIMARY, primary);\n" + "  }\n" + "\n" + "\n" + "  }\n"
                            + "  public static class FieldNames \n" + "{\n"
                            + "public static final String PROFILE_URL = \"profileUrl\";\n"
                            + "public static final String ENTITLEMENTS = \"entitlements\";\n"
                            + "public static final String COUNTRY = \"country\";\n"
                            + "public static final String X509_CERTIFICATES = \"x509Certificates\";\n"
                            + "public static final String PREFERRED_LANGUAGE = \"preferredLanguage\";\n"
                            + "public static final String ADDRESSES = \"addresses\";\n"
                            + "public static final String FORMATTED = \"formatted\";\n"
                            + "public static final String DISPLAY_NAME = \"displayName\";\n"
                            + "public static final String TIMEZONE = \"timezone\";\n"
                            + "public static final String POSTAL_CODE = \"postalCode\";\n"
                            + "public static final String ROLES = \"roles\";\n"
                            + "public static final String TITLE = \"title\";\n"
                            + "public static final String LOCALE = \"locale\";\n"
                            + "public static final String TYPE = \"type\";\n"
                            + "public static final String PHOTOS = \"photos\";\n"
                            + "public static final String PHONE_NUMBERS = \"phoneNumbers\";\n"
                            + "public static final String IMS = \"ims\";\n"
                            + "public static final String EMAILS = \"emails\";\n"
                            + "public static final String HONORIFIC_SUFFIX = \"honorificSuffix\";\n"
                            + "public static final String PASSWORD = \"password\";\n"
                            + "public static final String FAMILY_NAME = \"familyName\";\n"
                            + "public static final String ID = \"id\";\n"
                            + "public static final String VALUE = \"value\";\n"
                            + "public static final String NICK_NAME = \"nickName\";\n"
                            + "public static final String GIVEN_NAME = \"givenName\";\n"
                            + "public static final String DISPLAY = \"display\";\n"
                            + "public static final String LOCALITY = \"locality\";\n"
                            + "public static final String EXTERNAL_ID = \"externalId\";\n"
                            + "public static final String HONORIFIC_PREFIX = \"honorificPrefix\";\n"
                            + "public static final String ACTIVE = \"active\";\n"
                            + "public static final String GROUPS = \"groups\";\n"
                            + "public static final String USER_NAME = \"userName\";\n"
                            + "public static final String STREET_ADDRESS = \"streetAddress\";\n"
                            + "public static final String NAME = \"name\";\n"
                            + "public static final String MIDDLE_NAME = \"middleName\";\n"
                            + "public static final String USER_TYPE = \"userType\";\n"
                            + "public static final String REGION = \"region\";\n"
                            + "public static final String $REF = \"$ref\";\n"
                            + "public static final String PRIMARY = \"primary\";\n" + "}\n" + "}",
                            generatedUserClass);
  }
}
